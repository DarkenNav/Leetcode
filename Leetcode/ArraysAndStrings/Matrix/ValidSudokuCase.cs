using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Leetcode.ArraysAndStrings.Matrix
{
    public class ValidSudokuCase
    {
        public void Cases()
        {
            var result_0 = IsValidSudoku([
                 ['5','3','.',  '.','7','.',  '.','.','.']
                ,['6','.','.',  '1','9','5',  '.','.','.']
                ,['.','9','8',  '.','.','.',  '.','6','.']

                ,['8','.','.',  '.','6','.',  '.','.','3']
                ,['4','.','.',  '8','.','3',  '.','.','1']
                ,['7','.','.',  '.','2','.',  '.','.','6']

                ,['.','6','.',  '.','.','.',  '2','8','.']
                ,['.','.','.',  '4','1','9',  '2','.','5']
                ,['.','.','.',  '.','8','.',  '.','7','9']
                ]);

            var result_1 = IsValidSudoku([
                 ['8','3','.','.','7','.','.','.','.']
                ,['6','.','.','1','9','5','.','.','.']
                ,['.','9','8','.','.','.','.','6','.']
                ,['8','.','.','.','6','.','.','.','3']
                ,['4','.','.','8','.','3','.','.','1']
                ,['7','.','.','.','2','.','.','.','6']
                ,['.','6','.','.','.','.','2','8','.']
                ,['.','.','.','4','1','9','.','.','5']
                ,['.','.','.','.','8','.','.','7','9']
                ]);

            var result_2 = IsValidSudoku([
                ['.', '.', '4', '.', '.', '.', '6', '3', '.'],
                ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
                ['5', '.', '.', '.', '.', '.', '.', '9', '.'],
                ['.', '.', '.', '5', '6', '.', '.', '.', '.'],
                ['4', '.', '3', '.', '.', '.', '.', '.', '1'],
                ['.', '.', '.', '7', '.', '.', '.', '.', '.'],
                ['.', '.', '.', '5', '.', '.', '.', '.', '.'],
                ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
                ['.', '.', '.', '.', '.', '.', '.', '.', '.']
                ]);

            var result_3 = IsValidSudoku([
                ['.','.','.','.','5','.','.','1','.'],
                ['.','4','.','3','.','.','.','.','.'],
                ['.','.','.','.','.','3','.','.','1'],
                ['8','.','.','.','.','.','.','2','.'],
                ['.','.','2','.','7','.','.','.','.'],
                ['.','1','5','.','.','.','.','.','.'],
                ['.','.','.','.','.','2','.','.','.'],
                ['.','2','.','9','.','.','.','.','.'],
                ['.','.','4','.','.','.','.','.','.']
                ]);

            var result_4 = IsValidSudoku([
                ['5','3','.','.','7','.','.','.','.'],
                ['6','.','.','1','9','5','.','.','.'],
                ['.','9','8','.','.','.','.','6','.'],
                ['8','.','.','.','6','.','.','.','3'],
                ['4','.','.','8','.','3','.','.','1'],
                ['7','.','.','.','2','.','.','.','6'],
                ['.','6','.','.','.','.','2','8','.'],
                ['.','.','.','4','1','9','.','.','5'],
                ['.','.','.','.','8','.','.','7','9']
                ]);
        }

        public bool IsValidSudoku(char[][] board)
        {
            var set = new HashSet<char>();
            for (var i = 0; i < 9; i++)
            {
                set.Clear();
                for (var j = 0; j < 9; j++)
                {
                    if (board[i][j] != '.')
                        if (!set.Add(board[i][j]))
                            return false;
                }

                set.Clear();
                for (var j = 0; j < 9; j++)
                {
                    if (board[j][i] != '.')
                        if (!set.Add(board[j][i]))
                            return false;
                }
            }

            var ii = 0;
            var jj = 0;
            while (ii < 9 && jj < 9)
            {
                if (!Check(board, [ii, jj]))
                    return false;

                ii += 3;
                if (ii >= 9 && jj < 8)
                {
                    jj += 3;
                    ii = 0;
                }
            }

            return true;
        }

        private bool Check(char[][] board, int[] start, int n = 3, int m = 3)
        {
            var set = new HashSet<char>();
            for (var i = start[0]; i < start[0] + n; i++)
            {
                for (var j = start[1]; j < start[1] + m; j++)
                {
                    if (board[i][j] != '.')
                        if (!set.Add(board[i][j]))
                            return false;
                }
            }
            return true;
        }
    }
}
